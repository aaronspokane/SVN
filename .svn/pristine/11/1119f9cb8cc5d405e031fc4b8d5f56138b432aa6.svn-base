//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FASuite.Scheduler.FAReporting {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FAReportingServiceSoap", Namespace="http://tempuri.org/")]
    public partial class FAReportingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CloseRptRASConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportAsByteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertRptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback Conversion_GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportsFailedToSendDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCompletionDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNexRunTimeDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FAReportingService() {
            this.Url = "http://localhost/InfoCenter/Reporting/FAReportingService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CloseRptRASConnectionCompletedEventHandler CloseRptRASConnectionCompleted;
        
        /// <remarks/>
        public event GetReportAsByteCompletedEventHandler GetReportAsByteCompleted;
        
        /// <remarks/>
        public event GetTimeoutCompletedEventHandler GetTimeoutCompleted;
        
        /// <remarks/>
        public event ConvertRptsCompletedEventHandler ConvertRptsCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event Conversion_GetDataCompletedEventHandler Conversion_GetDataCompleted;
        
        /// <remarks/>
        public event CheckTablesCompletedEventHandler CheckTablesCompleted;
        
        /// <remarks/>
        public event InsertDataCompletedEventHandler InsertDataCompleted;
        
        /// <remarks/>
        public event ReportsFailedToSendDataCompletedEventHandler ReportsFailedToSendDataCompleted;
        
        /// <remarks/>
        public event StartReportCompletedEventHandler StartReportCompleted;
        
        /// <remarks/>
        public event UpdateCompletionDataCompletedEventHandler UpdateCompletionDataCompleted;
        
        /// <remarks/>
        public event UpdateNexRunTimeDataCompletedEventHandler UpdateNexRunTimeDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseRptRASConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseRptRASConnection(string sessionRptID) {
            this.Invoke("CloseRptRASConnection", new object[] {
                        sessionRptID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloseRptRASConnection(string sessionRptID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloseRptRASConnection", new object[] {
                        sessionRptID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCloseRptRASConnection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CloseRptRASConnectionAsync(string sessionRptID) {
            this.CloseRptRASConnectionAsync(sessionRptID, null);
        }
        
        /// <remarks/>
        public void CloseRptRASConnectionAsync(string sessionRptID, object userState) {
            if ((this.CloseRptRASConnectionOperationCompleted == null)) {
                this.CloseRptRASConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseRptRASConnectionOperationCompleted);
            }
            this.InvokeAsync("CloseRptRASConnection", new object[] {
                        sessionRptID}, this.CloseRptRASConnectionOperationCompleted, userState);
        }
        
        private void OnCloseRptRASConnectionOperationCompleted(object arg) {
            if ((this.CloseRptRASConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseRptRASConnectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReportAsByte", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetReportAsByte(string xmlString, string UserId, string Export_Type) {
            object[] results = this.Invoke("GetReportAsByte", new object[] {
                        xmlString,
                        UserId,
                        Export_Type});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportAsByte(string xmlString, string UserId, string Export_Type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportAsByte", new object[] {
                        xmlString,
                        UserId,
                        Export_Type}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetReportAsByte(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReportAsByteAsync(string xmlString, string UserId, string Export_Type) {
            this.GetReportAsByteAsync(xmlString, UserId, Export_Type, null);
        }
        
        /// <remarks/>
        public void GetReportAsByteAsync(string xmlString, string UserId, string Export_Type, object userState) {
            if ((this.GetReportAsByteOperationCompleted == null)) {
                this.GetReportAsByteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportAsByteOperationCompleted);
            }
            this.InvokeAsync("GetReportAsByte", new object[] {
                        xmlString,
                        UserId,
                        Export_Type}, this.GetReportAsByteOperationCompleted, userState);
        }
        
        private void OnGetReportAsByteOperationCompleted(object arg) {
            if ((this.GetReportAsByteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportAsByteCompleted(this, new GetReportAsByteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTimeout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTimeout() {
            object[] results = this.Invoke("GetTimeout", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTimeout(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTimeout", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetTimeout(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeoutAsync() {
            this.GetTimeoutAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeoutAsync(object userState) {
            if ((this.GetTimeoutOperationCompleted == null)) {
                this.GetTimeoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeoutOperationCompleted);
            }
            this.InvokeAsync("GetTimeout", new object[0], this.GetTimeoutOperationCompleted, userState);
        }
        
        private void OnGetTimeoutOperationCompleted(object arg) {
            if ((this.GetTimeoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeoutCompleted(this, new GetTimeoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertRpts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConvertRpts() {
            this.Invoke("ConvertRpts", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertRpts(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertRpts", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndConvertRpts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ConvertRptsAsync() {
            this.ConvertRptsAsync(null);
        }
        
        /// <remarks/>
        public void ConvertRptsAsync(object userState) {
            if ((this.ConvertRptsOperationCompleted == null)) {
                this.ConvertRptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertRptsOperationCompleted);
            }
            this.InvokeAsync("ConvertRpts", new object[0], this.ConvertRptsOperationCompleted, userState);
        }
        
        private void OnConvertRptsOperationCompleted(object arg) {
            if ((this.ConvertRptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertRptsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetData(System.DateTime dateTime) {
            object[] results = this.Invoke("GetData", new object[] {
                        dateTime});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetData(System.DateTime dateTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetData", new object[] {
                        dateTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(System.DateTime dateTime) {
            this.GetDataAsync(dateTime, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(System.DateTime dateTime, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        dateTime}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Conversion_GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Conversion_GetData() {
            object[] results = this.Invoke("Conversion_GetData", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConversion_GetData(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Conversion_GetData", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndConversion_GetData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Conversion_GetDataAsync() {
            this.Conversion_GetDataAsync(null);
        }
        
        /// <remarks/>
        public void Conversion_GetDataAsync(object userState) {
            if ((this.Conversion_GetDataOperationCompleted == null)) {
                this.Conversion_GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConversion_GetDataOperationCompleted);
            }
            this.InvokeAsync("Conversion_GetData", new object[0], this.Conversion_GetDataOperationCompleted, userState);
        }
        
        private void OnConversion_GetDataOperationCompleted(object arg) {
            if ((this.Conversion_GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Conversion_GetDataCompleted(this, new Conversion_GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckTables", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckTables() {
            object[] results = this.Invoke("CheckTables", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckTables(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckTables", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckTables(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTablesAsync() {
            this.CheckTablesAsync(null);
        }
        
        /// <remarks/>
        public void CheckTablesAsync(object userState) {
            if ((this.CheckTablesOperationCompleted == null)) {
                this.CheckTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTablesOperationCompleted);
            }
            this.InvokeAsync("CheckTables", new object[0], this.CheckTablesOperationCompleted, userState);
        }
        
        private void OnCheckTablesOperationCompleted(object arg) {
            if ((this.CheckTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTablesCompleted(this, new CheckTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertData(string userID, string aTaskName, string new_xml_string, string editpage, string desc, string exporttype, string offset, string title) {
            this.Invoke("InsertData", new object[] {
                        userID,
                        aTaskName,
                        new_xml_string,
                        editpage,
                        desc,
                        exporttype,
                        offset,
                        title});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertData(string userID, string aTaskName, string new_xml_string, string editpage, string desc, string exporttype, string offset, string title, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertData", new object[] {
                        userID,
                        aTaskName,
                        new_xml_string,
                        editpage,
                        desc,
                        exporttype,
                        offset,
                        title}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInsertData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InsertDataAsync(string userID, string aTaskName, string new_xml_string, string editpage, string desc, string exporttype, string offset, string title) {
            this.InsertDataAsync(userID, aTaskName, new_xml_string, editpage, desc, exporttype, offset, title, null);
        }
        
        /// <remarks/>
        public void InsertDataAsync(string userID, string aTaskName, string new_xml_string, string editpage, string desc, string exporttype, string offset, string title, object userState) {
            if ((this.InsertDataOperationCompleted == null)) {
                this.InsertDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataOperationCompleted);
            }
            this.InvokeAsync("InsertData", new object[] {
                        userID,
                        aTaskName,
                        new_xml_string,
                        editpage,
                        desc,
                        exporttype,
                        offset,
                        title}, this.InsertDataOperationCompleted, userState);
        }
        
        private void OnInsertDataOperationCompleted(object arg) {
            if ((this.InsertDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportsFailedToSendData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReportsFailedToSendData(string Run_Id, System.DateTime nextRunTime) {
            this.Invoke("ReportsFailedToSendData", new object[] {
                        Run_Id,
                        nextRunTime});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReportsFailedToSendData(string Run_Id, System.DateTime nextRunTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportsFailedToSendData", new object[] {
                        Run_Id,
                        nextRunTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReportsFailedToSendData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReportsFailedToSendDataAsync(string Run_Id, System.DateTime nextRunTime) {
            this.ReportsFailedToSendDataAsync(Run_Id, nextRunTime, null);
        }
        
        /// <remarks/>
        public void ReportsFailedToSendDataAsync(string Run_Id, System.DateTime nextRunTime, object userState) {
            if ((this.ReportsFailedToSendDataOperationCompleted == null)) {
                this.ReportsFailedToSendDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportsFailedToSendDataOperationCompleted);
            }
            this.InvokeAsync("ReportsFailedToSendData", new object[] {
                        Run_Id,
                        nextRunTime}, this.ReportsFailedToSendDataOperationCompleted, userState);
        }
        
        private void OnReportsFailedToSendDataOperationCompleted(object arg) {
            if ((this.ReportsFailedToSendDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportsFailedToSendDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartReport(string Run_Id) {
            this.Invoke("StartReport", new object[] {
                        Run_Id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStartReport(string Run_Id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StartReport", new object[] {
                        Run_Id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndStartReport(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void StartReportAsync(string Run_Id) {
            this.StartReportAsync(Run_Id, null);
        }
        
        /// <remarks/>
        public void StartReportAsync(string Run_Id, object userState) {
            if ((this.StartReportOperationCompleted == null)) {
                this.StartReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartReportOperationCompleted);
            }
            this.InvokeAsync("StartReport", new object[] {
                        Run_Id}, this.StartReportOperationCompleted, userState);
        }
        
        private void OnStartReportOperationCompleted(object arg) {
            if ((this.StartReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCompletionData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCompletionData(string runId, bool onceOnly, string nextDateTime) {
            this.Invoke("UpdateCompletionData", new object[] {
                        runId,
                        onceOnly,
                        nextDateTime});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCompletionData(string runId, bool onceOnly, string nextDateTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCompletionData", new object[] {
                        runId,
                        onceOnly,
                        nextDateTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCompletionData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCompletionDataAsync(string runId, bool onceOnly, string nextDateTime) {
            this.UpdateCompletionDataAsync(runId, onceOnly, nextDateTime, null);
        }
        
        /// <remarks/>
        public void UpdateCompletionDataAsync(string runId, bool onceOnly, string nextDateTime, object userState) {
            if ((this.UpdateCompletionDataOperationCompleted == null)) {
                this.UpdateCompletionDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCompletionDataOperationCompleted);
            }
            this.InvokeAsync("UpdateCompletionData", new object[] {
                        runId,
                        onceOnly,
                        nextDateTime}, this.UpdateCompletionDataOperationCompleted, userState);
        }
        
        private void OnUpdateCompletionDataOperationCompleted(object arg) {
            if ((this.UpdateCompletionDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompletionDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateNexRunTimeData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNexRunTimeData(string runId, System.DateTime nextTime) {
            this.Invoke("UpdateNexRunTimeData", new object[] {
                        runId,
                        nextTime});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateNexRunTimeData(string runId, System.DateTime nextTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateNexRunTimeData", new object[] {
                        runId,
                        nextTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateNexRunTimeData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateNexRunTimeDataAsync(string runId, System.DateTime nextTime) {
            this.UpdateNexRunTimeDataAsync(runId, nextTime, null);
        }
        
        /// <remarks/>
        public void UpdateNexRunTimeDataAsync(string runId, System.DateTime nextTime, object userState) {
            if ((this.UpdateNexRunTimeDataOperationCompleted == null)) {
                this.UpdateNexRunTimeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNexRunTimeDataOperationCompleted);
            }
            this.InvokeAsync("UpdateNexRunTimeData", new object[] {
                        runId,
                        nextTime}, this.UpdateNexRunTimeDataOperationCompleted, userState);
        }
        
        private void OnUpdateNexRunTimeDataOperationCompleted(object arg) {
            if ((this.UpdateNexRunTimeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNexRunTimeDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CloseRptRASConnectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetReportAsByteCompletedEventHandler(object sender, GetReportAsByteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportAsByteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportAsByteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTimeoutCompletedEventHandler(object sender, GetTimeoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ConvertRptsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void Conversion_GetDataCompletedEventHandler(object sender, Conversion_GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Conversion_GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Conversion_GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckTablesCompletedEventHandler(object sender, CheckTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ReportsFailedToSendDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StartReportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateCompletionDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateNexRunTimeDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591