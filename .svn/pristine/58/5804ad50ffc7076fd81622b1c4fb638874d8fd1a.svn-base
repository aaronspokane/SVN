using System;
using System.Collections;
using System.ComponentModel;
using System.Configuration.Install;
using System.Reflection;

namespace FASuite.Scheduler
{
    /// <summary>
    /// Manage installation of Windows service via installutil.exe.
    /// </summary>
    [RunInstaller(true)]
    public class ProjectInstaller : System.Configuration.Install.Installer
    {
        private System.ServiceProcess.ServiceProcessInstaller serviceProcessInstaller;
        private System.ServiceProcess.ServiceInstaller serviceInstaller;
        private System.ComponentModel.Container components = null;

        public ProjectInstaller()
        {
        }

        private void AddInstallers()
        {
            // create process definition (what user context)
            using (this.serviceProcessInstaller = new System.ServiceProcess.ServiceProcessInstaller())
            {
                this.serviceProcessInstaller.Account = System.ServiceProcess.ServiceAccount.LocalSystem;
                this.serviceProcessInstaller.Password = this.Context.Parameters["Password"];
                this.serviceProcessInstaller.Username = this.Context.Parameters["UserName"];

                // create service definition
                using (this.serviceInstaller = new System.ServiceProcess.ServiceInstaller())
                {
                    this.serviceInstaller.ServiceName = this.Context.Parameters["ServiceName"];
                    this.serviceInstaller.DisplayName = this.Context.Parameters["DisplayName"];
                    this.serviceInstaller.Description = "Runs scheduled jobs and distributes reports";
                    this.serviceInstaller.ServicesDependedOn = new string[] { "" };
                    this.serviceInstaller.StartType = System.ServiceProcess.ServiceStartMode.Automatic;
                    this.Installers.AddRange(new System.Configuration.Install.Installer[] { this.serviceProcessInstaller, this.serviceInstaller });
                }
            }
        }

        protected override void OnBeforeUninstall(IDictionary savedState)
        {
            base.OnBeforeUninstall(savedState);
            AddInstallers();
        }

        protected override void OnBeforeInstall(IDictionary savedState)
        {
            base.OnBeforeInstall(savedState);
            AddInstallers();
        }

        protected override void OnAfterInstall(IDictionary savedState)
        {
            // start service after it is installed
            using (System.ServiceProcess.ServiceController sc = new System.ServiceProcess.ServiceController(this.Context.Parameters["ServiceName"]))
            {
                sc.Start();
            }
            base.OnAfterInstall(savedState);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (components != null)
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }
    }
}